"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.userRoutes = void 0;
const express_1 = require("express");
const users_controllers_1 = require("../controllers/users.controllers");
const contacts_controllers_1 = require("../controllers/contacts.controllers");
const users_schemas_1 = require("../schemas/users.schemas");
const ensureDataIsValid_middleware_1 = require("../middlewares/ensureDataIsValid.middleware");
const ensureIsAccountOwnerMiddleware_middleware_1 = require("../middlewares/ensureIsAccountOwnerMiddleware.middleware");
const ensureTokenIsValid_middleware_1 = require("../middlewares/ensureTokenIsValid.middleware");
const checkIfUserEmailIsExists_middleware_1 = require("../middlewares/checkIfUserEmailIsExists.middleware");
const ensureUserExists_middleware_1 = require("../middlewares/ensureUserExists.middleware");
const userRoutes = (0, express_1.Router)();
exports.userRoutes = userRoutes;
userRoutes.post("/register", (0, ensureDataIsValid_middleware_1.ensureDataIsValid)(users_schemas_1.userSchemaRequest), checkIfUserEmailIsExists_middleware_1.checkIfUserEmailIsExistsMiddleware, users_controllers_1.createUserController);
userRoutes.post("/login", (0, ensureDataIsValid_middleware_1.ensureDataIsValid)(users_schemas_1.userLoginSchema), users_controllers_1.userLoginController);
userRoutes.get("", users_controllers_1.listUsersController);
userRoutes.get("/:id", ensureUserExists_middleware_1.ensureUserExistsMiddleware, users_controllers_1.retrieveUsersController);
userRoutes.get("/dashboard/:id", ensureUserExists_middleware_1.ensureUserExistsMiddleware, ensureTokenIsValid_middleware_1.ensureTokenIsValidMiddleware, ensureIsAccountOwnerMiddleware_middleware_1.ensureIsAccountOwnerMiddleware, contacts_controllers_1.getLoggedUserController);
userRoutes.get("/contacts/:id", ensureUserExists_middleware_1.ensureUserExistsMiddleware, ensureTokenIsValid_middleware_1.ensureTokenIsValidMiddleware, ensureIsAccountOwnerMiddleware_middleware_1.ensureIsAccountOwnerMiddleware, contacts_controllers_1.getUserContactsController);
userRoutes.patch("/:id", ensureUserExists_middleware_1.ensureUserExistsMiddleware, ensureTokenIsValid_middleware_1.ensureTokenIsValidMiddleware, ensureIsAccountOwnerMiddleware_middleware_1.ensureIsAccountOwnerMiddleware, (0, ensureDataIsValid_middleware_1.ensureDataIsValid)(users_schemas_1.userUpdateSchema), users_controllers_1.updateUserController);
userRoutes.delete("/:id", ensureUserExists_middleware_1.ensureUserExistsMiddleware, ensureTokenIsValid_middleware_1.ensureTokenIsValidMiddleware, ensureIsAccountOwnerMiddleware_middleware_1.ensureIsAccountOwnerMiddleware, users_controllers_1.deleteUserController);
